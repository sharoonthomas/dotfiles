[include]
	path = .gitconfig.local
[user]
	name = Sharoon Thomas
	email = sharoon.thomas@openlabs.co.in
	signingkey = F9BB6DF8
[core]
	excludesfile = /Users/mitsuhiko/.gitignore
	autocrlf = input
	precomposeunicode = true
	editor = vim
	#pager = delta --dark --plus-color="#012800" --minus-color="#340001"
	editor = /usr/bin/vim
[color]
	ui = auto
[color "branch"]
	current = red
	local = yellow
	remote = green
[color "diff"]
	meta = cyan
	frag = magenta
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[alias]
	st = status -sb
	ci = commit
	runci = commit --allow-empty -nm 'emity commit to run ci'
	co = checkout
	br = branch
	cp = cherry-pick
	cps = cherry-pick -s
	today = diff @{yesterday}.. --stat
	meh = commit --amend
	wdiff = diff --word-diff=color
	wshow = show --word-diff=color
	lasttag = describe --tags --abbrev=0
	branches = branch -vv
	getbranch = "!x() { git co origin/$1 -b $1; }; x"
	fixbranch = "!x() { b=`git symbolic-ref -q --short HEAD` && git rebase --onto $b master $1 && git diff --stat $b && git checkout $b; }; x"
	autotrack = "!x() { b=`git symbolic-ref -q --short HEAD` && git branch -u \"origin/$b\" || echo \"error: not a branch\"; }; x"
	slog = log --pretty=format:"%C(auto,yellow)%h%C(auto)%d\\ %C(auto,reset)%s\\ \\ [%C(auto,blue)%cn%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)]"
	glog = log --graph --pretty=format:"%C(auto,yellow)%h%C(auto)%d\\ %C(auto,reset)%s\\ \\ [%C(auto,blue)%an%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)]"
	gflog = log -p --cc --graph --decorate
	wtf = log --pretty=format:"%C(auto,yellow)%h%C(auto)%d%C(auto,reset)\\ by\\ %C(auto,blue)%an%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)%n\\ %s%n" --stat
	unci = reset HEAD^
	uncommit = reset HEAD^
	ls = ls-files
        rup = !git remote update `git rev-parse --symbolic-full-name HEAD@{u}|cut -d/ -f3`
	in = !git wtf HEAD..HEAD@{u}
	out = !git wtf HEAD@{u}..HEAD
	killbranches = "!git branch | grep -v '\\bmaster\\b' | xargs git branch -d 2> /dev/null; comm -12 <(git branch | sed 's/ *//g') <(git remote prune origin | sed 's/^.*origin\\///g') | xargs -L1 -J % git branch -D %"
	sync = !git pull --rebase && git push
	down = "!git remote update; git pull --ff-only"
	comerge = "!x() { target=`git symbolic-ref HEAD`; git co $1; git merge $target; }; x"
	pill = pull
	ours = "!f() { git checkout --ours -- $@ && git add -- $@; }; f"
	theirs = "!f() { git checkout --theirs -- $@ && git add -- $@; }; f"
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	authors = shortlog -sn
	addpr = "!f() { git fetch origin pull/$1/head:pr/$1; }; f"
	addprx = "!f() { b=`git symbolic-ref -q --short HEAD` && \
		echo \"Making branch for pull request #$1 [pr/$1]\" && \
		git fetch origin pull/$1/head:pr/$1 && \
		echo \"Rebasing pr/$1 onto $b...\" && \
		git fetch -q -f origin pull/$1/merge:refs/PR_MERGE_HEAD && \
		git rebase -q --onto $b PR_MERGE_HEAD^ pr/$1 && \
		git checkout -q $b && echo && \
		git diff --stat $b..pr/$1 && echo && \
		git log --oneline $b..pr/$1; \
		git update-ref -d refs/PR_MERGE_HEAD; \
		}; f"
	resetmodules = "!git submodule deinit -f . && rm -rf \"$(git rev-parse --git-dir)/modules\" && git submodule update --init"
	sup = submodule update --init --recursive
	main-branch = "!f() { gitHeadsDir=\"$(git rev-parse --show-toplevel)/.git/refs/heads\"; if [ -f \"$gitHeadsDir/main\" ]; then echo 'main'; elif [ -f \"$gitHeadsDir/master\" ]; then echo 'master'; else git remote show origin | grep 'HEAD branch' | cut -d' ' -f5; fi; }; f"
	main-alias = "!f() { if (git show-ref --verify -q refs/heads/main && !git show-ref --verify -q refs/heads/master); then (git symbolic-ref refs/heads/master refs/heads/main); else (git symbolic-ref refs/heads/main refs/heads/master); fi }; f"
	rebase-branch = "!f() { git rebase -i $(git merge-base $(git main-branch) HEAD); }; f"
[instaweb]
	httpd=webrick
[push]
	default=matching
[diff]
	algorithm = patience
<<<<<<< HEAD
[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[rerere]
	enabled = true
[interactive]
	#diffFilter = delta --color-only
[submodule]
	recurse = true
[user]
	name = Armin Ronacher
	email = armin.ronacher@active-4.com
[init]
	defaultBranch = main
[pull]
	rebase = false
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
