# If not running interactively, don't do anything
[ -z "$PS1" ] && return

__DEFAULT_COLOR="[00m"
__GRAY_COLOR="[37m"
__PINK_COLOR="[35m"
__GREEN_COLOR="[32m"
__ORANGE_COLOR="[33m"
__RED_COLOR="[31m"

if [ `id -u` == '0' ]; then
  __USER_COLOR=$__RED_COLOR
else
  __USER_COLOR=$__PINK_COLOR
fi

__VC_PROMPT=$' on \033[34m%n\033[00m:\033[00m%[unknown]b\033[32m'
__VC_PROMPT_EX="$__VC_PROMPT%m%u"
if hash vcprompt 2> /dev/null; then
  __HAVE_VCPROMPT=1
else
  __HAVE_VCPROMPT=0
fi

mitsuhikos_vcprompt() {
  path=`pwd`
  prompt="$__VC_PROMPT_EX"
  if [ $__HAVE_VCPROMPT == 1 ]; then
    vcprompt -f "$prompt"
  fi
}

mitsuhikos_lastcommandfailed() {
  code=$?
  if [ $code != 0 ]; then
    echo -n $'\033[37m exited \033[31m'
    echo -n $code
    echo -n $'\033[37m'
  fi
}

mitsuhikos_backgroundjobs() {
  jobs|python -c 'if 1:
    import sys
    items = ["\033[36m%s\033[37m" % x.split()[2]
             for x in sys.stdin.read().splitlines()]
    if items:
      if len(items) > 2:
        string = "%s, and %s" % (", ".join(items[:-1]), items[-1])
      else:
        string = ", ".join(items)
      print("\033[37m running %s" % string)
  '
}

mitsuhikos_virtualenv() {
  if [ x$VIRTUAL_ENV != x ]; then
    if [[ $VIRTUAL_ENV == *.virtualenvs/* ]]; then
      ENV_NAME=`basename "${VIRTUAL_ENV}"`
    else
      folder=`dirname "${VIRTUAL_ENV}"`
      ENV_NAME=`basename "$folder"`
    fi
    echo -n $' \033[37mworkon \033[31m'
    echo -n $ENV_NAME
    echo -n $'\033[00m'
    # Shell title
    echo -n $'\033]0;venv:'
    echo -n $ENV_NAME
    echo -n $'\007'
  fi

  # Also setup our readline properly constantly since
  # stuff tends to overwrite this.
  stty werase undef
  bind '"\C-w": unix-filename-rubout'
}

export __BASEPROMPT='\e]0;\007\n\e${__USER_COLOR}\u \
\e${__GRAY_COLOR}at \e${__ORANGE_COLOR}\h \
\e${__GRAY_COLOR}in \e${__GREEN_COLOR}\w\
`mitsuhikos_lastcommandfailed`\
\e${__GRAY_COLOR}`mitsuhikos_vcprompt`\
`mitsuhikos_backgroundjobs`\
`mitsuhikos_virtualenv`\
\e${__DEFAULT_COLOR}'
export PS1="\[\033[G\]${__BASEPROMPT}
$ "

export TERM=xterm-256color

shopt -s histappend

# Make sure window sizes update correctly.
shopt -s checkwinsize

# Completions
if [ -f /usr/local/git/contrib/completion ]; then
  . /usr/local/git/contrib/completion/git-completion.bash
fi
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

. ~/.bashrc.local
. ~/.myprofile

# added by travis gem
[ -f /Users/mitsuhiko/.travis/travis.sh ] && source /Users/mitsuhiko/.travis/travis.sh

# hack to get ppc out of that thing
export ARCHFLAGS="-arch i386 -arch x86_64"

if [ x`which ack-grep` != x ]; then
  alias ack=ack-grep
fi

# For lazy people like me
from() { expect -c "spawn -noecho python
expect \">>> \"
send \"from $*\r\"
interact +++ return"; }
import() { expect -c "spawn -noecho python
expect \">>> \"
send \"import $*\r\"
interact +++ return"; }

# Useful command for stripping whitespace
remove_trailing_whitespace() {
  find . -name $* -exec sed -i '' -e's/[[:space:]]*$//' {} \;
}

# Meh OS X
alias fixopenwith='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user'

# Python
export PYTHONSTARTUP=~/.pythonstartup.py

# Extra stuff
if [ -f ~/.profile_local ]; then
  source ~/.profile_local
fi

# Perforce shenanigans
export P4CONFIG=.p4rc

# Make sure window sizes update correctly.
shopt -s checkwinsize

function rustup {
  curl -s https://static.rust-lang.org/rustup.sh | sudo sh
}

export GEM_HOME=~/.gem
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
